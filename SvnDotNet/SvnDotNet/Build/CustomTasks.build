<?xml version="1.0"?>

<project name="UserProps" xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<target name="customtasks">
		<echo message="Creating custom tasks assembly..."/>
		<script language="C#">
			<references>
				<lib>
					<include name="${project::get-base-directory() + '/Vendor/ICSharpCode'}" asis="true" />
				</lib>
				<include name="ICSharpCode.SharpZipLib.dll"/>
			</references>
			<imports>
				<import namespace="ICSharpCode.SharpZipLib"/>
				<import namespace="ICSharpCode.SharpZipLib.Tar"/>
				<import namespace="ICSharpCode.SharpZipLib.GZip"/>
				<import namespace="ICSharpCode.SharpZipLib.BZip2"/>
			</imports>
			<code>
				<![CDATA[
				[TaskName("movedir")]
				public class MoveDir : Task {
				
					private string _from = null;
					private string _to = null;
					private int _retry = 0;
					
					[TaskAttribute("from", Required=true)]
					public string From {
						get { return _from; }
						set { _from = value; }
					}

					[TaskAttribute("to", Required=true)]
					public string to {
						get { return _to; }
						set { _to = value; }
					}
					
					[TaskAttribute("retry", Required=false)]
					public int retry {
						get { return _retry; }
						set { _retry = value; }
					}
					
					protected override void ExecuteTask() {
						Log(Level.Info, String.Format("Moving '{0}' to '{1}'",
							_from, _to));
							
						int tries = 0;
						bool success = false;
							
						do {
							try {
								tries++;
								Directory.Move(_from, _to );
								success = true;
							}
							catch (System.IO.IOException e) {
								if (tries > _retry)
									throw e;
								Log(Level.Warning, String.Format(
									"Move failed; retrying {0}/{1}", tries, _retry));
								System.Threading.Thread.Sleep(2000);
							}
						} while (!success && (tries <= _retry));
						
						if(!success) {
							throw new System.IO.IOException("Could not move directory");
						}
					}
				}
				
				[TaskName("untar")]
				public class UnTar : Task {
				
					private string _tarfile;
					private string _destdir;
					private string _compresstype;

					[TaskAttribute("tarfile", Required=true)]
					public string tarfile {
						get { return _tarfile; }
						set { _tarfile = value; }
					}

					[TaskAttribute("destdir", Required=true)]
					public string destdir {
						get { return _destdir; }
						set { _destdir = value; }
					}
					
					[TaskAttribute("compresstype", Required=false)]
					public string compresstype {
						get { return _compresstype; }
						set { _compresstype = value; }
					}
					
					protected override void ExecuteTask() {
						Log(Level.Info, String.Format("Extracting '{0}' to '{1}'",
							_tarfile, _destdir));
						
						Stream inStream = File.OpenRead(_tarfile);
						
						switch(_compresstype) {
							case "gzip":
								inStream = new GZipInputStream(inStream);
								break;
								
							case "bzip2":
								inStream = new BZip2InputStream(inStream);
								break;
						}

						TarArchive archive = TarArchive.CreateInputTarArchive(inStream);
						archive.ExtractContents(_destdir);
						
						archive.CloseArchive();
					}
				}
			]]>
			</code>
		</script>

	</target>

</project>
