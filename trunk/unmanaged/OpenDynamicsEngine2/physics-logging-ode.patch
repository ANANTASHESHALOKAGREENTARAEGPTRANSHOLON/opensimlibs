Index: unmanaged/OpenDynamicsEngine2/include/ode/export-dif.h
===================================================================
--- unmanaged/OpenDynamicsEngine2/include/ode/export-dif.h	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/include/ode/export-dif.h	(作業コピー)
@@ -25,8 +25,14 @@
 
 #include <ode/common.h>
 
+#ifdef __cplusplus
+extern "C" {
+#endif
 
-ODE_API void dWorldExportDIF (dWorldID w, FILE *file, const char *world_name);
+ODE_API void dWorldExportDIF (dWorldID w, const char* filename, bool append, const char *world_name);
 
+#ifdef __cplusplus
+}
+#endif
 
 #endif
Index: unmanaged/OpenDynamicsEngine2/ode/demo/demo_piston.cpp
===================================================================
--- unmanaged/OpenDynamicsEngine2/ode/demo/demo_piston.cpp	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/ode/demo/demo_piston.cpp	(作業コピー)
@@ -287,7 +287,7 @@
 //   char str[24];
 //   sprintf(str, "%06d",cnt++);
 
-//   dWorldExportDIF(world, file, str);
+//   dWorldExportDIF(world, file, str);  <-- update to use char* instead of FILE* for file parm
 }
 
 
Index: unmanaged/OpenDynamicsEngine2/ode/demo/demo_heightfield.cpp
===================================================================
--- unmanaged/OpenDynamicsEngine2/ode/demo/demo_heightfield.cpp	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/ode/demo/demo_heightfield.cpp	(作業コピー)
@@ -531,11 +531,7 @@
 
 
   if (write_world) {
-    FILE *f = fopen ("state.dif","wt");
-    if (f) {
-      dWorldExportDIF (world,f,"X");
-      fclose (f);
-    }
+    dWorldExportDIF (world,"state.dif",false,"X");
     write_world = 0;
   }
 
Index: unmanaged/OpenDynamicsEngine2/ode/demo/demo_buggy.cpp
===================================================================
--- unmanaged/OpenDynamicsEngine2/ode/demo/demo_buggy.cpp	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/ode/demo/demo_buggy.cpp	(作業コピー)
@@ -147,13 +147,8 @@
     speed = 0;
     steer = 0;
     break;
-  case '1': {
-      FILE *f = fopen ("state.dif","wt");
-      if (f) {
-        dWorldExportDIF (world,f,"");
-        fclose (f);
-      }
-    }
+  case '1':
+    dWorldExportDIF (world,"state.dif",false,"");
   }
 }
 
Index: unmanaged/OpenDynamicsEngine2/ode/demo/demo_jointPU.cpp
===================================================================
--- unmanaged/OpenDynamicsEngine2/ode/demo/demo_jointPU.cpp	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/ode/demo/demo_jointPU.cpp	(作業コピー)
@@ -224,7 +224,7 @@
 //   char str[24];
 //   sprintf(str, "%06d",cnt++);
 
-//   dWorldExportDIF(world, file, str);
+//   dWorldExportDIF(world, file, str);  <-- update to use char* instead of FILE* file parm
 }
 
 
Index: unmanaged/OpenDynamicsEngine2/ode/demo/demo_boxstack.cpp
===================================================================
--- unmanaged/OpenDynamicsEngine2/ode/demo/demo_boxstack.cpp	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/ode/demo/demo_boxstack.cpp	(作業コピー)
@@ -501,11 +501,7 @@
   if (!pause) dWorldQuickStep (world,0.02);
 
   if (write_world) {
-    FILE *f = fopen ("state.dif","wt");
-    if (f) {
-      dWorldExportDIF (world,f,"X");
-      fclose (f);
-    }
+    dWorldExportDIF (world,"state.dif",false,"X");
     write_world = 0;
   }
   
Index: unmanaged/OpenDynamicsEngine2/ode/src/export-dif.cpp
===================================================================
--- unmanaged/OpenDynamicsEngine2/ode/src/export-dif.cpp	(リビジョン 45)
+++ unmanaged/OpenDynamicsEngine2/ode/src/export-dif.cpp	(作業コピー)
@@ -491,132 +491,141 @@
 //***************************************************************************
 // world
 
-void dWorldExportDIF (dWorldID w, FILE *file, const char *prefix)
+void dWorldExportDIF (dWorldID w, const char *filename, bool append, const char *prefix)
 {
-	PrintingContext c;
-	c.file = file;
+	FILE *file;
+	if(append) {
+	  file=fopen(filename, "at");
+	} else {
+	  file=fopen(filename, "wt");
+	}
+	if(file) {
+		PrintingContext c;
+		c.file = file;
 #if defined(dSINGLE)
-	c.precision = 7;
+		c.precision = 7;
 #else
-	c.precision = 15;
+		c.precision = 15;
 #endif
-	c.indent = 1;
-
-	fprintf (file,"-- Dynamics Interchange Format v0.1\n\n%sworld = dynamics.world {\n",prefix);
-	c.print ("gravity",w->gravity);
-	c.print ("ODE = {");
-	c.indent++;
-	c.print ("ERP",w->global_erp);
-	c.print ("CFM",w->global_cfm);
-	c.print ("auto_disable = {");
-	c.indent++;
-	c.print ("linear_threshold",w->adis.linear_average_threshold);
-	c.print ("angular_threshold",w->adis.angular_average_threshold);
-	c.print ("average_samples",(int)w->adis.average_samples);
-	c.print ("idle_time",w->adis.idle_time);
-	c.print ("idle_steps",w->adis.idle_steps);
-	fprintf (file,"\t\t},\n\t},\n}\n");
-	c.indent -= 3;
-
-	// bodies
-	int num = 0;
-	fprintf (file,"%sbody = {}\n",prefix);
-	for (dxBody *b=w->firstbody; b; b=(dxBody*)b->next) {
-		b->tag = num;
-		fprintf (file,"%sbody[%d] = dynamics.body {\n\tworld = %sworld,\n",prefix,num,prefix);
-		c.indent++;
-		c.print ("pos",b->posr.pos);
-		c.print ("q",b->q,4);
-		c.print ("lvel",b->lvel);
-		c.print ("avel",b->avel);
-		c.print ("mass",b->mass.mass);
-		fprintf (file,"\tI = {{");
-		for (int i=0; i<3; i++) {
-			for (int j=0; j<3; j++) {
-				c.printReal (b->mass.I[i*4+j]);
-				if (j < 2) fputc (',',file);
-			}
-			if (i < 2) fprintf (file,"},{");
-		}
-		fprintf (file,"}},\n");
-		c.printNonzero ("com",b->mass.c);
+		c.indent = 1;
+	
+		fprintf (file,"-- Dynamics Interchange Format v0.1\n\n%sworld = dynamics.world {\n",prefix);
+		c.print ("gravity",w->gravity);
 		c.print ("ODE = {");
 		c.indent++;
-		if (b->flags & dxBodyFlagFiniteRotation) c.print ("finite_rotation",1);
-		if (b->flags & dxBodyDisabled) c.print ("disabled",1);
-		if (b->flags & dxBodyNoGravity) c.print ("no_gravity",1);
-		if (b->flags & dxBodyAutoDisable) {
-			c.print ("auto_disable = {");
+		c.print ("ERP",w->global_erp);
+		c.print ("CFM",w->global_cfm);
+		c.print ("auto_disable = {");
+		c.indent++;
+		c.print ("linear_threshold",w->adis.linear_average_threshold);
+		c.print ("angular_threshold",w->adis.angular_average_threshold);
+		c.print ("average_samples",(int)w->adis.average_samples);
+		c.print ("idle_time",w->adis.idle_time);
+		c.print ("idle_steps",w->adis.idle_steps);
+		fprintf (file,"\t\t},\n\t},\n}\n");
+		c.indent -= 3;
+	
+		// bodies
+		int num = 0;
+		fprintf (file,"%sbody = {}\n",prefix);
+		for (dxBody *b=w->firstbody; b; b=(dxBody*)b->next) {
+			b->tag = num;
+			fprintf (file,"%sbody[%d] = dynamics.body {\n\tworld = %sworld,\n",prefix,num,prefix);
 			c.indent++;
-			c.print ("linear_threshold",b->adis.linear_average_threshold);
-			c.print ("angular_threshold",b->adis.angular_average_threshold);
-			c.print ("average_samples",(int)b->adis.average_samples);
-			c.print ("idle_time",b->adis.idle_time);
-			c.print ("idle_steps",b->adis.idle_steps);
-			c.print ("time_left",b->adis_timeleft);
-			c.print ("steps_left",b->adis_stepsleft);
+			c.print ("pos",b->posr.pos);
+			c.print ("q",b->q,4);
+			c.print ("lvel",b->lvel);
+			c.print ("avel",b->avel);
+			c.print ("mass",b->mass.mass);
+			fprintf (file,"\tI = {{");
+			for (int i=0; i<3; i++) {
+				for (int j=0; j<3; j++) {
+					c.printReal (b->mass.I[i*4+j]);
+					if (j < 2) fputc (',',file);
+				}
+				if (i < 2) fprintf (file,"},{");
+			}
+			fprintf (file,"}},\n");
+			c.printNonzero ("com",b->mass.c);
+			c.print ("ODE = {");
+			c.indent++;
+			if (b->flags & dxBodyFlagFiniteRotation) c.print ("finite_rotation",1);
+			if (b->flags & dxBodyDisabled) c.print ("disabled",1);
+			if (b->flags & dxBodyNoGravity) c.print ("no_gravity",1);
+			if (b->flags & dxBodyAutoDisable) {
+				c.print ("auto_disable = {");
+				c.indent++;
+				c.print ("linear_threshold",b->adis.linear_average_threshold);
+				c.print ("angular_threshold",b->adis.angular_average_threshold);
+				c.print ("average_samples",(int)b->adis.average_samples);
+				c.print ("idle_time",b->adis.idle_time);
+				c.print ("idle_steps",b->adis.idle_steps);
+				c.print ("time_left",b->adis_timeleft);
+				c.print ("steps_left",b->adis_stepsleft);
+				c.indent--;
+				c.print ("},");
+			}
+			c.printNonzero ("facc",b->facc);
+			c.printNonzero ("tacc",b->tacc);
+			if (b->flags & dxBodyFlagFiniteRotationAxis) {
+				c.print ("finite_rotation_axis",b->finite_rot_axis);
+			}
 			c.indent--;
 			c.print ("},");
-		}
-		c.printNonzero ("facc",b->facc);
-		c.printNonzero ("tacc",b->tacc);
-		if (b->flags & dxBodyFlagFiniteRotationAxis) {
-			c.print ("finite_rotation_axis",b->finite_rot_axis);
-		}
-		c.indent--;
-		c.print ("},");
-		if (b->geom) {
-			c.print ("geometry = {");
-			c.indent++;
-			for (dxGeom *g=b->geom; g; g=g->body_next) {
-				c.print ("{");
+			if (b->geom) {
+				c.print ("geometry = {");
 				c.indent++;
-				printGeom (c,g);
+				for (dxGeom *g=b->geom; g; g=g->body_next) {
+					c.print ("{");
+					c.indent++;
+					printGeom (c,g);
+					c.indent--;
+					c.print ("},");
+				}
 				c.indent--;
 				c.print ("},");
 			}
 			c.indent--;
-			c.print ("},");
+			c.print ("}");
+			num++;
 		}
-		c.indent--;
-		c.print ("}");
-		num++;
-	}
-
-	// joints
-	num = 0;
-	fprintf (file,"%sjoint = {}\n",prefix);
-	for (dxJoint *j=w->firstjoint; j; j=(dxJoint*)j->next) {
-		c.indent++;
-		const char *name = getJointName (j);
-		fprintf (file,
-			"%sjoint[%d] = dynamics.%s_joint {\n"
-			"\tworld = %sworld,\n"
-			"\tbody = {"
-			,prefix,num,name,prefix);
-
-		if ( j->node[0].body )
-			fprintf (file,"%sbody[%d]",prefix,j->node[0].body->tag);
-		if ( j->node[1].body )
-			fprintf (file,",%sbody[%d]",prefix,j->node[1].body->tag);
-		fprintf (file,"}\n");
-
-		switch (j->vtable->typenum) {
-			case dJointTypeBall: printBall (c,j); break;
-			case dJointTypeHinge: printHinge (c,j); break;
-			case dJointTypeSlider: printSlider (c,j); break;
-			case dJointTypeContact: printContact (c,j); break;
-			case dJointTypeUniversal: printUniversal (c,j); break;
-			case dJointTypeHinge2: printHinge2 (c,j); break;
-			case dJointTypeFixed: printFixed (c,j); break;
-			case dJointTypeAMotor: printAMotor (c,j); break;
-			case dJointTypeLMotor: printLMotor (c,j); break;
-			case dJointTypePR: printPR (c,j); break;
-			case dJointTypePU: printPU (c,j); break;
-			case dJointTypePiston: printPiston (c,j); break;
+	
+		// joints
+		num = 0;
+		fprintf (file,"%sjoint = {}\n",prefix);
+		for (dxJoint *j=w->firstjoint; j; j=(dxJoint*)j->next) {
+			c.indent++;
+			const char *name = getJointName (j);
+			fprintf (file,
+				"%sjoint[%d] = dynamics.%s_joint {\n"
+				"\tworld = %sworld,\n"
+				"\tbody = {"
+				,prefix,num,name,prefix);
+	
+			if ( j->node[0].body )
+				fprintf (file,"%sbody[%d]",prefix,j->node[0].body->tag);
+			if ( j->node[1].body )
+				fprintf (file,",%sbody[%d]",prefix,j->node[1].body->tag);
+			fprintf (file,"}\n");
+	
+			switch (j->vtable->typenum) {
+				case dJointTypeBall: printBall (c,j); break;
+				case dJointTypeHinge: printHinge (c,j); break;
+				case dJointTypeSlider: printSlider (c,j); break;
+				case dJointTypeContact: printContact (c,j); break;
+				case dJointTypeUniversal: printUniversal (c,j); break;
+				case dJointTypeHinge2: printHinge2 (c,j); break;
+				case dJointTypeFixed: printFixed (c,j); break;
+				case dJointTypeAMotor: printAMotor (c,j); break;
+				case dJointTypeLMotor: printLMotor (c,j); break;
+				case dJointTypePR: printPR (c,j); break;
+				case dJointTypePU: printPU (c,j); break;
+				case dJointTypePiston: printPiston (c,j); break;
+			}
+			c.indent--;
+			c.print ("}");
+			num++;
 		}
-		c.indent--;
-		c.print ("}");
-		num++;
+		fclose(file);
 	}
 }
